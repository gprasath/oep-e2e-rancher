#!/bin/bash

pod() {

## Creating api key
echo -e "\n************************ Creating api key *********************************************\n"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-rancher && bash stages/cluster-connect/create-apikey node'
}

node() {

bash utils/e2e-cr jobname:create-apikey jobphase:Waiting
bash utils/e2e-cr jobname:create-apikey jobphase:Running 
bash utils/e2e-cr jobname:trrc01-cluster-connect jobphase:Waiting
bash utils/e2e-cr jobname:trrc01-cluster3-connect jobphase:Waiting
bash utils/e2e-cr jobname:client-components-check jobphase:Waiting
bash utils/e2e-cr jobname:client3-components-check jobphase:Waiting

URL=http://$(kubectl get nodes -o wide --no-headers | awk {'print $6'} | tail -n 1)

# Use cluster2 kube config
export KUBECONFIG=~/.kube/cluster2_config

# Apply pre-requisites
echo -e "\n[ Applying pre-requisites ]-------------------------------------------------\n"

# Setup litmus on cluster2
echo -e "\n[ Setting up Litmus ]-----------------------------\n"
kubectl apply -f oep-e2e/litmus/prerequisite/rbac.yaml
kubectl apply -f oep-e2e/litmus/prerequisite/crds.yaml
# Create docker secret
kubectl apply -f oep-e2e/litmus/prerequisite/docker-secret.yml -n litmus
# Create crb
kubectl create clusterrolebinding default-admin --clusterrole cluster-admin --serviceaccount=default:default
# Create configmap for DOP URL
kubectl create configmap config --from-literal=url=$URL -n litmus

# Wait for the resources to show up
echo -e "\nWaiting for the litmus resources to show up\n"
sleep 10

echo -e "\n[ Creating api key for new user account in OEP ]---------------------------------------\n"
kubectl create -f oep-e2e/litmus/director/create-apikey/run_litmus_test.yml

test_name=create-apikey-check
echo -e "\nTest Name: $test_name\n"

litmus_pod=$(kubectl get po -n litmus | grep $test_name  | awk {'print $1'} | tail -n 1)
echo $litmus_pod

job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
while [[ "$job_status" != "Completed" ]]
do 
  job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
  sleep 6
done

kubectl logs -f $litmus_pod -n litmus
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
echo -e "\nTest Result: $testResult\n"

if [ "$testResult" != Pass ]
then
  export KUBECONFIG=~/.kube/config
  bash utils/e2e-cr jobname:create-apikey jobphase:Completed
  exit 1; 
else
  kubectl get secret director-user-pass -n litmus -o yaml > secret.yaml
  export KUBECONFIG=~/.kube/config
  kubectl create -f secret.yaml -n litmus
  bash utils/e2e-cr jobname:create-apikey jobphase:Completed

fi

}

if [ "$1" == "node" ];then
  node
else
  pod
fi