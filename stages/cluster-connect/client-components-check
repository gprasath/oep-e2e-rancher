#!/bin/bash

pod() {

## Running connected cluster component check
echo -e "\n************************ Running client-component checks ******************************\n"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-rancher && bash stages/cluster-connect/client-components-check node'
}

node() {

bash utils/pooling jobname:trrc01-cluster-connect
bash utils/e2e-cr jobname:client-components-check jobphase:Running

echo -e "\nWaiting for the client components to show up\n"
sleep 100

# Use cluster2 kube config
export KUBECONFIG=~/.kube/cluster2_config

echo -e "\n[ Running client components check ]---------------\n"

##Cluster name
cluster=cluster-2
echo -e "\nCLUSTER_NAME: $cluster\n"

kubectl create -f oep-e2e/litmus/director/cluster-connect-check/run_litmus_test.yml
test_name=cluster-connect-check
echo -e "\nTest Name: $test_name\n"
litmus_pod=$(kubectl get po -n litmus | grep $test_name  | awk {'print $1'} | tail -n 1)
echo $litmus_pod
job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
while [[ "$job_status" != "Completed" ]]
do
    job_status=$(kubectl get po  $litmus_pod -n litmus | awk {'print $3'} | tail -n 1)
    sleep 6
done
kubectl logs -f $litmus_pod -n litmus
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
echo -e "\nTest Result: $testResult\n"
if [ "$testResult" != Pass ]
then
    exit 1;
else
    export KUBECONFIG=~/.kube/config
    bash utils/e2e-cr jobname:client-components-check jobphase:Completed
fi

}

if [ "$1" == "node" ];then
  node
else
  pod
fi